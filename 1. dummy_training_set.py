# -*- coding: utf-8 -*-
"""dummy training set

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZQSExk8V2NZxw0F8ajd5C4IdmF-PxWZ9
"""

import pandas as pd
import numpy as np
df = pd.read_excel('Blacklist & outgoing.xlsx', 'Sheet2')

df = df[df['anum_ispstn'] == 1]
df.reset_index()

# Melakukan grouping berdasarkan anum dan bnum yang sama dengan menjumlahkan duration dan menghitung count
df['count'] = 0
result_baru = pd.DataFrame()
result_baru = df.groupby(['anum', 'bnum']).agg({'duration': 'sum', 'count': 'size'}).reset_index()
result_baru

result_baru

#split antara df1 dan df2
df1 = result_baru.head(200)
df2 = result_baru.tail(210)

df1

import random

def dummy(df1):
  for i in range(len(df1)):
    df1.at[i, 'duration'] = df1.at[i, 'duration'] + random.randint(100,500)
    df1.at[i, 'count'] = df1.at[i, 'count'] + random.randint(0,2)

  return df1

# melakukan manipulasi data pada df1
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)
df1 = dummy(df1)

df1

# menyatukan df1 yang telah dimanipulasi dengan df2
result_baru = pd.concat([df1, df2], ignore_index=True)

# melakukan filterasi nilai count >= 5 dan duration >= 2400
result_baru[(result_baru['count'] >= 5) & (result_baru['duration'] >=2400)]

"""Mengikuti langkah-langkah pada feature engineer untuk mendapatkan feature yang sesuai"""

result_baru_new = pd.DataFrame()
result_baru_new = result_baru.groupby('anum').agg({'duration': 'sum', 'count': 'size'}).reset_index()
result_baru_new.rename(columns={'duration': 'total_duration', 'count' : 'diff_call'}, inplace=True)
result_baru_new

result_inner = pd.DataFrame()
result_inner = pd.merge(result_baru, result_baru_new, on='anum', how='inner')
result_inner

result_baru_new_2 = pd.DataFrame()
result_baru_new_2 = result_inner.groupby('anum').agg({'count': 'sum'}).reset_index()
result_baru_new_2.rename(columns={'count': 'total_call'}, inplace=True)
result_baru_new_2

result_inner_2 = pd.DataFrame()
result_inner_2 = pd.merge(result_inner, result_baru_new_2, on='anum', how='inner')
result_inner_2['is_fraud'] = 0
result_inner_2

# memberikan label 1 pada baris yang sesuai dengan rule-based fraud
for i in range(len(result_inner_2)):
  if result_inner_2.iloc[i]['duration'] >= 2400 and result_inner_2.iloc[i]['count'] >=5 :
    result_inner_2.loc[i]['is_fraud'] = 1

result_train1 = result_inner_2

# membaca dataset baru untuk penambahan anum dummy
bakal = pd.read_excel('result_baru.xlsx')
bakal = bakal.drop('Unnamed: 0', axis=1)
bakal

df = pd.read_excel('Blacklist & outgoing.xlsx', 'Sheet2')

anum_unik = df['anum'].unique()
len(anum_unik)

bnum_unik = df['bnum'].unique()
bnum_unik

bakal_unik = bakal['anum'].unique()

# menambah dummy baru
for i in range(2974):
  if anum_unik[i] not in bakal_unik:
    bakal.loc[len(bakal)] = {'anum': anum_unik[i], 'bnum': np.random.choice(bnum_unik),
                             'duration': np.random.randint(1, 100), 'count': np.random.randint(1, 11)}

bakal

# memisahkan data bakal1 dengan bakal2
bakal1 = bakal.head(1000)
bakal2 = bakal.tail(3097-1000)

# melakukan manipulasi data pada bakal1
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)
bakal1 = dummy(bakal1)

bakal1

# menyatukan bakal1 yang telah dimanipulasi dengan bakal2
result_baru = pd.concat([bakal1, bakal2], ignore_index=True)

# melakukan filterasi nilai count >= 5 dan duration >= 2400
result_baru[(result_baru['count'] >= 5) & (result_baru['duration'] >=2400)]

"""Mengikuti langkah-langkah pada feature engineer untuk mendapatkan feature yang sesuai"""

result_baru_new = pd.DataFrame()
result_baru_new = result_baru.groupby('anum').agg({'duration': 'sum', 'count': 'size'}).reset_index()
result_baru_new.rename(columns={'duration': 'total_duration', 'count' : 'diff_call'}, inplace=True)
result_baru_new

result_inner = pd.DataFrame()
result_inner = pd.merge(result_baru, result_baru_new, on='anum', how='inner')
result_inner

result_baru_new_2 = pd.DataFrame()
result_baru_new_2 = result_inner.groupby('anum').agg({'count': 'sum'}).reset_index()
result_baru_new_2.rename(columns={'count': 'total_call'}, inplace=True)
result_baru_new_2

result_inner_2 = pd.DataFrame()
result_inner_2 = pd.merge(result_inner, result_baru_new_2, on='anum', how='inner')
result_inner_2['is_fraud'] = 0
result_inner_2

# memberikan label 1 pada baris yang sesuai dengan rule-based fraud
for i in range(len(result_inner_2)):
  if result_inner_2.iloc[i]['duration'] >= 2400 and result_inner_2.iloc[i]['count'] >=5 :
    result_inner_2.loc[i]['is_fraud'] = 1

result_train2 = result_inner_2

# menyatukan data asli yang telah melakukan feature engineer dengan data dummy
result_dummy = pd.concat([result_train1, result_train2], ignore_index=True)

result_dummy.to_excel('result_dummy.xlsx')